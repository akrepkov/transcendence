#!/bin/bash
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
MAGENTA='\033[1;35m'
CYAN='\033[1;36m'
END='\033[0m'

behind_case() {
    echo "$YELLOW""‚ö†Ô∏è  Your branch '$CURRENT_BRANCH' is behind the remote branch '$REMOTE_BRANCH' by $behind_count commit(s).""$END"

    while true; do
        echo "Would you like to pull the latest changes? [y/N]"
        exec < /dev/tty
        read -r answer
        exec <&-
        case "$answer" in
            [yY][eE][sS] | [yY])
                echo "$GREEN""üîÑ Pulling latest changes...""$END"
                git pull origin "$CURRENT_BRANCH"
                break
                ;;
            [nN][oO] | [nN])
                echo "$RED""‚ùó Skipped pulling. You may be out of sync.""$END"
                break
                ;;
            *)
                echo "Please answer yes or no (y/n)."
                ;;
        esac
    done
}

ahead_case() {
    echo "$YELLOW""‚ÑπÔ∏è  Your branch '$CURRENT_BRANCH' is ahead of '$REMOTE_BRANCH' by $ahead_count commit(s).""$END"


    while true; do
        echo "Would you like to push the latest changes? [y/N]"
        exec < /dev/tty
        read -r answer
        exec <&-
        case "$answer" in
            [yY][eE][sS] | [yY])
                echo "$GREEN""üì§ Pushing your commits...""$END"
                git push origin "$CURRENT_BRANCH"
                break
                ;;
            [nN][oO] | [nN])
                echo "$RED""‚ùó Skipped pushing. You may be out of sync.""$END"
                break
                ;;
            *)
                echo "Please answer yes or no (y/n)."
                ;;
        esac
    done
}

if [ "$3" != "1" ]; then
    exit 0
fi

git fetch origin

CURRENT_BRANCH=$(git branch --show-current)
if [ -z "$CURRENT_BRANCH" ]; then
    echo "$RED""You're in a detached HEAD state, just a small note :)""$END"
    exit 0
fi
REMOTE_BRANCH="origin/$CURRENT_BRANCH"
if ! git show-ref --verify --quiet refs/remotes/$REMOTE_BRANCH; then
    echo "$BLUE""Currently on a local branch, doesn't have a remote yet""$END"
    exit 0
fi

behind_count=$(git rev-list --count HEAD.."$REMOTE_BRANCH")
ahead_count=$(git rev-list --count "$REMOTE_BRANCH"..HEAD)

if [ "$ahead_count" -gt 0 ] && [ "$behind_count" -gt 0 ]; then
    echo "$RED""‚ö†Ô∏è  Your branch '$CURRENT_BRANCH' is both ahead and behind the remote branch '$REMOTE_BRANCH'"
    echo "   üîº Ahead by $ahead_count commit(s), üîΩ behind by $behind_count commit(s)."
    echo "   Some evil magic is going on here, be careful and you might want to fix things up.""$END"
elif [ "$behind_count" -gt 0 ]; then
    behind_case
elif [ "$ahead_count" -gt 0 ]; then
    ahead_case
else
    echo "$GREEN""‚úÖ Your branch '$CURRENT_BRANCH' is up to date with '$REMOTE_BRANCH'.""$END"
fi
